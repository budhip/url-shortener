// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/budhip/url-shortener/model"
)

// UrlShortenerUseCase is an autogenerated mock type for the UrlShortenerUseCase type
type UrlShortenerUseCase struct {
	mock.Mock
}

// GetShortCode provides a mock function with given fields: ctx, shortCode
func (_m *UrlShortenerUseCase) GetShortCode(ctx context.Context, shortCode string) (string, error) {
	ret := _m.Called(ctx, shortCode)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, shortCode)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetShortCodeStats provides a mock function with given fields: ctx, shortCode
func (_m *UrlShortenerUseCase) GetShortCodeStats(ctx context.Context, shortCode string) (map[string]interface{}, error) {
	ret := _m.Called(ctx, shortCode)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]interface{}); ok {
		r0 = rf(ctx, shortCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreShorten provides a mock function with given fields: ctx, url, shortCode
func (_m *UrlShortenerUseCase) StoreShorten(ctx context.Context, url string, shortCode string) (*model.ShortenResp, error) {
	ret := _m.Called(ctx, url, shortCode)

	var r0 *model.ShortenResp
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.ShortenResp); ok {
		r0 = rf(ctx, url, shortCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ShortenResp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, url, shortCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
